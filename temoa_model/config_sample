#-----------------------------------------------------
# This is a sample configuration file for Temoa
# It allows you to specify (and document) all run-time model options 
# Legal chars in path: a-z A-Z 0-9 - _ \ / . : 
# Comment out non-mandatory options to omit them
#-----------------------------------------------------

# Input File (Mandatory) 
# Input can be a .sqlite or .dat file
# Both relative path and absolute path are accepted
--input= data_files/TEMOA-Piedmont/TEMOA_Piedmont.sqlite
# data_files/TEMOA-Piedmont/TEMOA_Piedmont.sqlite
# data_files/TEMOA-Base/temoa_utopia.sqlite

# Output File (Mandatory)
# The output file must be a existing .sqlite file
--output=data_files/TEMOA-Piedmont/TEMOA_Piedmont.sqlite

# Scenario Name (Mandatory) 
# This scenario name is used to store results within the output .sqlite file
--scenario=prova_1

# Path to folder containing input dataset (Mandatory)
# This is the location where database files reside
--path_to_data=data_files/TEMOA-Piedmont

# Solve Myopically (Optional)
# Allows user to solve one model time period at a time, sequentially
# Default operation is "perfect foresight"
#--myopic
#--myopic_periods=2
#--keep_myopic_databases

# Report Duals (Optional) 
# Store Duals results in the output .sqlite file
--saveDUALS

# Spreadsheet Output (Optional) 
# Direct model output to a spreadsheet
# Scenario name specified above is used to name the spreadsheet
--saveEXCEL

# Save the log file output (Optional)
# This is the same output provided to the shell
#--saveTEXTFILE

# Solver-related arguments (Optional)
#--neos                            # Optional, specify if you want to use NEOS server to solve
--solver=gurobi                    # Optional, indicate the solver
#--keep_pyomo_lp_file              # Optional, generate Pyomo-compatible LP file

# Modeling-to-Generate Alternatives (Optional)
# Run name will be automatically generated by appending '_mga_' and iteration number to scenario name
#--mga {
#	slack=0.01                # Objective function slack value in MGA runs
#	iteration=10              # Number of MGA iterations
#	method=random             # MGA objective function weighting method (integer, normalized, random)
#}

# Multi-objective optimization (Optional)
# Run name will be automatically generated by appending '_moo_' and iteration number to scenario name
#--moo {
#	f1=cost                   # First objective function (cost, emissions, energySR, materialSR)
#	f2=emissions              # Second objective function (cost, emissions, energySR, materialSR)
#	c=0.0001                  # This parameter should be like 1E-4
#	ncaps=11                  # Number of caps
#}

# Modeling to generate near-Pareto-optimal Alternatives (Optional)
# Run name will be automatically generated by appending '_mgpa_' and iteration number to scenario name
#--mgpa {
#	f1=cost                   # First objective function (cost, emissions, energySR, materialSR)
#	f2=emissions              # Second objective function (cost, emissions, energySR, materialSR)
#	c=0.0001                  # This parameter should be like 1E-4
#	ncaps=11                  # Number of caps
#	slack1=0.01               # Slack value for the first objective function in MGPA runs
#	slack2=0.01               # Slack value for the second objective function in MGPA runs
#	iteration=10              # Number of MGPA iterations
#	method=random             # MGPA objective function weighting method (integer, normalized, random)
#}
